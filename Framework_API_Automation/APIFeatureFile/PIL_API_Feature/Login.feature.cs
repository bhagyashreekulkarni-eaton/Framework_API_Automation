// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Framework_API_Automation.APIFeatureFile.PIL_API_Feature
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PILLoginFeature : object, Xunit.IClassFixture<PILLoginFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "APIFeatureFile/PIL_API_Feature", "PIL Login", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Login.feature"
#line hidden
        
        public PILLoginFeature(PILLoginFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify login to PIL console with valid credential")]
        [Xunit.TraitAttribute("FeatureTitle", "PIL Login")]
        [Xunit.TraitAttribute("Description", "Verify login to PIL console with valid credential")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "lokeshrsontakke@eaton.com", "Krunal@123", "LoginResponse.json", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyLoginToPILConsoleWithValidCredential(string uRL, string validEmailId, string validPassword, string expectedJsonFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("ValidEmailId", validEmailId);
            argumentsOfScenario.Add("ValidPassword", validPassword);
            argumentsOfScenario.Add("expectedJsonFile", expectedJsonFile);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify login to PIL console with valid credential", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync(string.Format("the base URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync(string.Format("the user login to PIL console with \"{0}\" and \"{1}\"", validEmailId, validPassword), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
    await testRunner.ThenAsync(string.Format("the response body should match the expected JSON response from \"{0}\"", expectedJsonFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify login to PIL console with invalid credentials")]
        [Xunit.TraitAttribute("FeatureTitle", "PIL Login")]
        [Xunit.TraitAttribute("Description", "Verify login to PIL console with invalid credentials")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "Innvalid@eaton.com", "Wrongpass@123", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyLoginToPILConsoleWithInvalidCredentials(string uRL, string invalidEmailid, string invalidPassword, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("InvalidEmailid", invalidEmailid);
            argumentsOfScenario.Add("InvalidPassword", invalidPassword);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify login to PIL console with invalid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
    await testRunner.GivenAsync(string.Format("the base URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync(string.Format("the user login to PIL console with \"{0}\" and \"{1}\"", invalidEmailid, invalidPassword), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
    await testRunner.ThenAsync("the response message should say \"Login failed with given credentials.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify login to PIL console with blank credentials")]
        [Xunit.TraitAttribute("FeatureTitle", "PIL Login")]
        [Xunit.TraitAttribute("Description", "Verify login to PIL console with blank credentials")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "", "", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyLoginToPILConsoleWithBlankCredentials(string uRL, string blankEmailID, string blankEmailPassword, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("BlankEmailID", blankEmailID);
            argumentsOfScenario.Add("BlankEmailPassword", blankEmailPassword);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify login to PIL console with blank credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 54
    await testRunner.GivenAsync(string.Format("the base URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 55
    await testRunner.WhenAsync(string.Format("the user login to PIL console with \"{0}\" and \"{1}\"", blankEmailID, blankEmailPassword), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
    await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
    await testRunner.ThenAsync("the response message should say \"Missing credentials\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify user should get Reset password link")]
        [Xunit.TraitAttribute("FeatureTitle", "PIL Login")]
        [Xunit.TraitAttribute("Description", "Verify user should get Reset password link")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "SendResetpassword.graphql", "lokeshrsontakke@eaton.com", "SendpasswordLinkResponse.json", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyUserShouldGetResetPasswordLink(string uRL, string graphqlFile, string emailid, string expectedJsonFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("graphqlFile", graphqlFile);
            argumentsOfScenario.Add("emailid", emailid);
            argumentsOfScenario.Add("expectedJsonFile", expectedJsonFile);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify user should get Reset password link", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
    await testRunner.GivenAsync(string.Format("the base URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.WhenAsync(string.Format("the user sends a POST request with GraphQL query from \"{0}\" for SendResetPassword" +
                            "Link to \"{1}\"", graphqlFile, emailid), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 72
    await testRunner.ThenAsync(string.Format("the response body should match the expected JSON response from \"{0}\"", expectedJsonFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify sent Reset password link")]
        [Xunit.TraitAttribute("FeatureTitle", "PIL Login")]
        [Xunit.TraitAttribute("Description", "Verify sent Reset password link")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "SendResetpassword.graphql", "lokeshrsontakke@eaton.com", new string[0])]
        public async global::System.Threading.Tasks.Task VerifySentResetPasswordLink(string uRL, string graphqlFile, string emailid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("graphqlFile", graphqlFile);
            argumentsOfScenario.Add("emailid", emailid);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify sent Reset password link", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 82
    await testRunner.GivenAsync(string.Format("the base URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 83
    await testRunner.WhenAsync(string.Format("the user sends a POST request with GraphQL query from \"{0}\" for SendResetPassword" +
                            "Link to \"{1}\"", graphqlFile, emailid), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await PILLoginFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await PILLoginFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
