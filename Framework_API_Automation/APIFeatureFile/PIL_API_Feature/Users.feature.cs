// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Framework_API_Automation.APIFeatureFile.PIL_API_Feature
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UsersFeature : object, Xunit.IClassFixture<UsersFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "APIFeatureFile/PIL_API_Feature", "users", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Users.feature"
#line hidden
        
        public UsersFeature(UsersFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify Create a new publisher user using GraphQL query and delete it")]
        [Xunit.TraitAttribute("FeatureTitle", "users")]
        [Xunit.TraitAttribute("Description", "Verify Create a new publisher user using GraphQL query and delete it")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "AddUserQuery.graphql", "TestAPI", "TestAPI", "TestAPI@gmail.com", "PUBLISHER", "AddUserResponse.json", "DeleteUserResponse.json", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyCreateANewPublisherUserUsingGraphQLQueryAndDeleteIt(string uRL, string graphqlFile, string firstName, string lastName, string email, string role, string expectedUserResponseFile, string expectedDeleteResponseFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("graphqlFile", graphqlFile);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("expectedUserResponseFile", expectedUserResponseFile);
            argumentsOfScenario.Add("expectedDeleteResponseFile", expectedDeleteResponseFile);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Create a new publisher user using GraphQL query and delete it", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
    await testRunner.GivenAsync(string.Format("the base graphql URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
    await testRunner.WhenAsync(string.Format("the user sends a POST request with GraphQL query from \"{0}\" and variables: firstN" +
                            "ame=\"{1}\", lastName=\"{2}\", email=\"{3}\", role=\"{4}\"", graphqlFile, firstName, lastName, email, role), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
    await testRunner.ThenAsync(string.Format("the response body should match the expected JSON response from \"{0}\"", expectedUserResponseFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 13
    await testRunner.WhenAsync("the user sends a POST request with GraphQL query for delete a user", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
    await testRunner.ThenAsync(string.Format("the response body should match the expected response from \"{0}\"", expectedDeleteResponseFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify Create a new ADMIN user using GraphQL query and delete it")]
        [Xunit.TraitAttribute("FeatureTitle", "users")]
        [Xunit.TraitAttribute("Description", "Verify Create a new ADMIN user using GraphQL query and delete it")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "AddUserQuery.graphql", "TestAPIAdmin", "TestAPIAdmin", "TestAPIAdmin@gmail.com", "ADMIN", "AddUserResponse.json", "DeleteUserResponse.json", new string[0])]
        public async global::System.Threading.Tasks.Task VerifyCreateANewADMINUserUsingGraphQLQueryAndDeleteIt(string uRL, string graphqlFile, string firstName, string lastName, string email, string role, string expectedUserResponseFile, string expectedDeleteResponseFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("graphqlFile", graphqlFile);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("expectedUserResponseFile", expectedUserResponseFile);
            argumentsOfScenario.Add("expectedDeleteResponseFile", expectedDeleteResponseFile);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Create a new ADMIN user using GraphQL query and delete it", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
    await testRunner.GivenAsync(string.Format("the base graphql URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
    await testRunner.WhenAsync(string.Format("the user sends a POST request with GraphQL query for create a admin user from \"{0" +
                            "}\" and variables: firstName=\"{1}\", lastName=\"{2}\", email=\"{3}\", role=\"{4}\"", graphqlFile, firstName, lastName, email, role), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
    await testRunner.ThenAsync(string.Format("the response body should match the expected JSON response from \"{0}\"", expectedUserResponseFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
    await testRunner.WhenAsync("the user sends a POST request with GraphQL query for delete a admin user", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
    await testRunner.ThenAsync(string.Format("the response body should match the expected response from \"{0}\"", expectedDeleteResponseFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify system prevents creation of new user account matching existing user")]
        [Xunit.TraitAttribute("FeatureTitle", "users")]
        [Xunit.TraitAttribute("Description", "Verify system prevents creation of new user account matching existing user")]
        [Xunit.TraitAttribute("Category", "PIl")]
        [Xunit.InlineDataAttribute("URL", "AddUserQuery.graphql", "Lokesh", "Sontake", "lokeshrsontakke@eaton.com", "ADMIN", "AddSameUserResponse.json", new string[0])]
        public async global::System.Threading.Tasks.Task VerifySystemPreventsCreationOfNewUserAccountMatchingExistingUser(string uRL, string graphqlFile, string firstName, string lastName, string email, string role, string expectedUserResponseFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PIl"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("graphqlFile", graphqlFile);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("expectedUserResponseFile", expectedUserResponseFile);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify system prevents creation of new user account matching existing user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
    await testRunner.GivenAsync(string.Format("the base graphql URI is \"{0}\"", uRL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
    await testRunner.WhenAsync(string.Format("the user sends a POST request with GraphQL query from \"{0}\" and variables: firstN" +
                            "ame=\"{1}\", lastName=\"{2}\", email=\"{3}\", role=\"{4}\"", graphqlFile, firstName, lastName, email, role), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
    await testRunner.ThenAsync(string.Format("the response body should match the expected JSON response from \"{0}\"", expectedUserResponseFile), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await UsersFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await UsersFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
